Compilar
    g++ -std=c++17 -Wall -Wextra -O2 "./main.cpp" "./view/MainInterface.cpp" "./view/UserInterface.cpp" "./view/ActivityInterface.cpp" "./business/controllers/UserController.cpp" "./business/controllers/ActivityController.cpp" "./business/controllers/FacadeSingletonController.cpp" "./business/report/ActivityHtmlReport.cpp" "./business/report/ActivityReportTemplate.cpp" "./business/report/ActivityTextReport.cpp" "./business/service/Validation.cpp" "./data/UserRepository.cpp" "./data/BinaryFileUserRepository.cpp" "./data/ActivityRepository.cpp" "./infra/log/LegacyLogger.cpp" -o "./app.exe"
    ./app.exe



Resumo dos Arquivos

/business
    /command
        /CreateActivityCommand
            - Comando para criar uma nova atividade (lab3)
        /EnrollUserCommand
            - Comando para inscrever um usuário em uma atividade (lab3)
        /ICommand
            - Interface base para todos os comandos (lab3)
        /RegisterUserCommand
            - Comando para registrar um novo usuário (lab3)
        /RemoveActivityCommand
            - Comando para remover uma atividade existente (lab3)
        /UndoActivityUpdateCommand
            - Comando para desfazer a última atualização de uma atividade (lab3)
        /UpdateActivityCommand
            - Comando para atualizar os detalhes de uma atividade (lab3)
    /controllers
        /UserController
            - adicionar e listar usuarios (lab1)
            - aplica Validation, (lab2)
            - adiciona role de usuario e login (lab3)
        /activityController
            - CRUD de atividade (lab3) e inscricao
        /FacadeSingletonController
            - fachada única dos gerentes e método de contagem (lab3)
    /memento
        /ActivityCaretaker
            - Responsável por armazenar e restaurar os estados das atividades (lab3)
        /ActivityMemento
            - Representa o estado salvo de uma atividade (lab3)
    /model
        /user
            - guarda dados(id, nome de usuário e senha) -> sem lógica
            - inclui papel do usuario: instrutor ou usuario comum (lab3)
        /Activity
            - nova entidade (id, nome, data, hora, categoria, nome do instruto, participantes[])
    /observer
        /LoggerNotificationObserver
            - Observador que registra notificações em um log (projeto final)
        /NotificationCenter
            - Gerencia a lista de observadores e notifica mudanças (projeto final)
        /UserNotificationObserver
            - Observador que envia notificações específicas para usuários (projeto final)
    /report
        /ActivityHtmlReport
            - Gera relatórios de atividades no formato HTML (lab2)
        /ActivityReportTemplate
            - Define o template base para relatórios de atividades (lab2)
        /ActivityTextReport
            - Gera relatórios de atividades no formato texto simples (lab2)
        /ReportFormat
            - Enumeração que define os formatos disponíveis para relatórios (lab2)
    /service
        /Validation
            - declara as funções de validação. O UserController chama estas funções e, se algo estiver errado, elas chamam as exceções (lab2)
    /strategy
        /CategoryFilterStrategy
            - Implementa a lógica para filtrar atividades por categoria (projeto final)
        /DateFilterStrategy
            - Implementa a lógica para filtrar atividades por data (projeto final)
        /IActivityFilterStrategy
            - Interface base para estratégias de filtro de atividades (projeto final)
        /InstructorFilterStrategy
            - Implementa a lógica para filtrar atividades por instrutor (projeto final)
/data
    /UserRepository
        - mantém a coleção de usuários na memória com vetor (lab1)
        - tem operações básicas: addUser, listAll, nextID (lab1)
        - base para o login em memória (lab3)
    /IUserRepository
        - duas implementações (RAM/Arquivo) trocáveis sem alterar controller (lab2)
        - login por nome de usuario (lab3)
    /BinaryFileUserRepository
        - armazena usuario em arquivo binario (lab2)
    /ActivityRepository
        - armazena as atividades e suas inscrições (lab3)
    /factory
        /BinaryFileDaoFactory
            - Fabrica que cria DAOs para persistência em arquivos binários (lab2)
        /IDaoFactory
            - Interface base para todas as fábricas de DAOs (lab2)
        /RamDaoFactory
            - Fabrica que cria DAOs para persistência em memória RAM (lab2)

/infra
    /error
        /ExceptionLogin
            - exceção específica para erros de login (lab2)
        /ExceptionPassword
            - exceção específica para erros de senha (lab2)
    /log
        /ILogger
            - Interface para implementação de loggers (lab2)
        /LegacyLogger
            - Implementação antiga de logger (lab2)
        /LegacyLoggerAdapter
            - Adaptador para integrar o LegacyLogger com a nova interface ILogger (lab2)

/view
    /UserInterface
        - menus, leitura(cadastro) e impressão (lab1)
            - chama UserController, mostra mensagens de erro capturando exceções (lab2)
        - contato com o UserController para criar e listar usuários (lab1)
    /MainInterface
        - menu principal (lab1)
        - pergunta se eh para escrever na RAM ou em um arquivo binario (lab2)
    /ActivityInterface
        - CRUD de atividades pelo instrulor (lab3)